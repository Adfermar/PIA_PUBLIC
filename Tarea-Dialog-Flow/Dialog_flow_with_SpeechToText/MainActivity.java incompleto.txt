package com.example.dialog_flow_with_speechtotext;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.google.api.gax.core.FixedCredentialsProvider;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.auth.oauth2.ServiceAccountCredentials;
import com.google.cloud.dialogflow.v2.SessionName;
import com.google.cloud.dialogflow.v2.SessionsClient;
import com.google.cloud.dialogflow.v2.SessionsSettings;
import com.google.common.collect.Lists;

import java.io.InputStream;
import java.util.UUID;

public class MainActivity extends AppCompatActivity {

    Button btSendToDialogFlow;
    EditText etSendToDialogFlow;
    TextView tvResponseFromDialogFlow;

    SessionsClient sessionClient;
    SessionName sessionName;
    final static String UNIQUE_UUID = UUID.randomUUID().toString();

    static String message = "Mensaje: ";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }

    private void init() {
        btSendToDialogFlow = findViewById(R.id.btSendToDialogFlow);
        etSendToDialogFlow = findViewById(R.id.etSendToDialogFlow);
        tvResponseFromDialogFlow = findViewById(R.id.tvResponseFromDialogFlow);

        btSendToDialogFlow.setOnClickListener(v-> {
            sendToDialogFlow();
        });
    }

    private void sendToDialogFlow() {
        String text = etSendToDialogFlow.getText().toString();
        etSendToDialogFlow.setText("");
        // Si el texto NO está vacío
        if(!text.isEmpty()) {
            // enviar
        } else {
            Toast.makeText(this, "No puede dejar el campo vacío", Toast.LENGTH_SHORT).show();
        }
    }

    private boolean setupDialogFlowClient() {
        boolean value = true;
        try {
            InputStream stream = this.getResources().openRawResource(R.raw.client_key);
            GoogleCredentials credentials = GoogleCredentials.fromStream(stream)
                    .createScoped(Lists.newArrayList("https://www.googleapis.com/auth/cloud-platform"));
            String projectId = ((ServiceAccountCredentials) credentials).getProjectId();
            SessionsSettings.Builder settingsBuilder = SessionsSettings.newBuilder();
            SessionsSettings sessionsSettings = settingsBuilder.setCredentialsProvider(
                    FixedCredentialsProvider.create(credentials)).build();
            sessionClient = SessionsClient.create(sessionsSettings);
            sessionName = SessionName.of(projectId, UNIQUE_UUID);
            return value;
        } catch (Exception e) {
            showMessage("\nexception in setupBot: " + e.getMessage() + "\n");
            return value;
        }
    }

    private void showMessage(String s) {
        runOnUiThread(()->{
            tvResponseFromDialogFlow.append(message + tvResponseFromDialogFlow);
        });
    }

}